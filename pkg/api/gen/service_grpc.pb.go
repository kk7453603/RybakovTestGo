// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: service.proto

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CurrencyService_AddCurrency_FullMethodName      = "/currency.v1.CurrencyService/AddCurrency"
	CurrencyService_RemoveCurrency_FullMethodName   = "/currency.v1.CurrencyService/RemoveCurrency"
	CurrencyService_GetCurrencyPrice_FullMethodName = "/currency.v1.CurrencyService/GetCurrencyPrice"
	CurrencyService_ListCurrencies_FullMethodName   = "/currency.v1.CurrencyService/ListCurrencies"
	CurrencyService_GetPriceHistory_FullMethodName  = "/currency.v1.CurrencyService/GetPriceHistory"
)

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с криптовалютами
type CurrencyServiceClient interface {
	// Добавление криптовалюты в список наблюдения
	AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	// Удаление криптовалюты из списка наблюдения
	RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получение цены конкретной криптовалюты
	GetCurrencyPrice(ctx context.Context, in *GetCurrencyPriceRequest, opts ...grpc.CallOption) (*CurrencyPriceResponse, error)
	// Получение списка всех отслеживаемых криптовалют
	ListCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	// Получение исторических данных о ценах
	GetPriceHistory(ctx context.Context, in *GetPriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_AddCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CurrencyService_RemoveCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetCurrencyPrice(ctx context.Context, in *GetCurrencyPriceRequest, opts ...grpc.CallOption) (*CurrencyPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrencyPriceResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetCurrencyPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) ListCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, CurrencyService_ListCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetPriceHistory(ctx context.Context, in *GetPriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceHistoryResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetPriceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility.
//
// Сервис для работы с криптовалютами
type CurrencyServiceServer interface {
	// Добавление криптовалюты в список наблюдения
	AddCurrency(context.Context, *AddCurrencyRequest) (*CurrencyResponse, error)
	// Удаление криптовалюты из списка наблюдения
	RemoveCurrency(context.Context, *RemoveCurrencyRequest) (*emptypb.Empty, error)
	// Получение цены конкретной криптовалюты
	GetCurrencyPrice(context.Context, *GetCurrencyPriceRequest) (*CurrencyPriceResponse, error)
	// Получение списка всех отслеживаемых криптовалют
	ListCurrencies(context.Context, *emptypb.Empty) (*ListCurrenciesResponse, error)
	// Получение исторических данных о ценах
	GetPriceHistory(context.Context, *GetPriceHistoryRequest) (*PriceHistoryResponse, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrencyServiceServer struct{}

func (UnimplementedCurrencyServiceServer) AddCurrency(context.Context, *AddCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) RemoveCurrency(context.Context, *RemoveCurrencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) GetCurrencyPrice(context.Context, *GetCurrencyPriceRequest) (*CurrencyPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyPrice not implemented")
}
func (UnimplementedCurrencyServiceServer) ListCurrencies(context.Context, *emptypb.Empty) (*ListCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedCurrencyServiceServer) GetPriceHistory(context.Context, *GetPriceHistoryRequest) (*PriceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceHistory not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}
func (UnimplementedCurrencyServiceServer) testEmbeddedByValue()                         {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrencyService_ServiceDesc, srv)
}

func _CurrencyService_AddCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).AddCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_AddCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).AddCurrency(ctx, req.(*AddCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_RemoveCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).RemoveCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_RemoveCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).RemoveCurrency(ctx, req.(*RemoveCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetCurrencyPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetCurrencyPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetCurrencyPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetCurrencyPrice(ctx, req.(*GetCurrencyPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_ListCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).ListCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetPriceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetPriceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetPriceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetPriceHistory(ctx, req.(*GetPriceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyService_ServiceDesc is the grpc.ServiceDesc for CurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currency.v1.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCurrency",
			Handler:    _CurrencyService_AddCurrency_Handler,
		},
		{
			MethodName: "RemoveCurrency",
			Handler:    _CurrencyService_RemoveCurrency_Handler,
		},
		{
			MethodName: "GetCurrencyPrice",
			Handler:    _CurrencyService_GetCurrencyPrice_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _CurrencyService_ListCurrencies_Handler,
		},
		{
			MethodName: "GetPriceHistory",
			Handler:    _CurrencyService_GetPriceHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
