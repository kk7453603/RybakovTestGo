package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"

	"github.com/kk7453603/RybakovTestGo/internal/adapters/grpc"
	"github.com/kk7453603/RybakovTestGo/internal/adapters/repository"
	"github.com/kk7453603/RybakovTestGo/internal/config"
	"github.com/kk7453603/RybakovTestGo/internal/core/services"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := connectDatabase(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	currencyRepo, priceRepo := repository.NewPostgresRepository(db)

	// –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ü–µ–Ω
	priceProvider := repository.NewExternalPriceProvider()

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
	currencyService := services.NewCurrencyService(currencyRepo, priceRepo, priceProvider)

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	grpcServer := grpc.NewGRPCServer(currencyService, cfg.GRPC.Port, cfg.Server.Port)

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
	serverErr := make(chan error, 1)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		serverErr <- grpcServer.Start()
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	select {
	case err := <-serverErr:
		log.Fatalf("‚ùå Server error: %v", err)
	case sig := <-quit:
		log.Printf("üîÑ Received signal: %v", sig)
	}

	log.Println("üõë Shutting down server...")
	grpcServer.Stop()

	// –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è graceful shutdown
	time.Sleep(2 * time.Second)
	log.Println("‚úÖ Server stopped successfully")
}

// connectDatabase –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
func connectDatabase(cfg config.DatabaseConfig) (*gorm.DB, error) {
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=%s TimeZone=%s",
		cfg.Host, cfg.User, cfg.Password, cfg.DBName, cfg.Port, cfg.SSLMode, cfg.Timezone)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		return nil, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	sqlDB, err := db.DB()
	if err != nil {
		return nil, err
	}

	if err := sqlDB.Ping(); err != nil {
		return nil, err
	}

	log.Println("Connected to database successfully!")
	return db, nil
}
